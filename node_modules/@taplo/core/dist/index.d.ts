/// <reference types="node" />
import { Readable, Writable } from "node:stream";
/**
 * Environment required for several Taplo functions.
 *
 * This is required because WebAssembly is not self-contained and is sand-boxed.
 */
interface Environment {
    /**
     * Return the current date.
     */
    now: () => Date;
    /**
     * Return the environment variable, if any.
     */
    envVar: (name: string) => string | undefined;
    /**
     * Return all environment variables as `[key, value]` pairs.
     */
    envVars: () => Array<[
        string,
        string
    ]>;
    /**
     * Return whether the standard error output is a tty or not.
     */
    stdErrAtty: () => boolean;
    /**
     * Read `n` bytes from the standard input.
     *
     * If the returned array is empty, EOF is reached.
     *
     * This function must not return more than `n` bytes.
     */
    stdin: Readable | ((n: bigint) => Promise<Uint8Array>);
    /**
     * Write the given bytes to the standard output returning
     * the number of bytes written.
     */
    stdout: Writable | ((bytes: Uint8Array) => Promise<number>);
    /**
     * Write the given bytes to the standard error output returning
     * the number of bytes written.
     */
    stderr: Writable | ((bytes: Uint8Array) => Promise<number>);
    /**
     * Search a glob file pattern and return the matched files.
     */
    glob: (pattern: string) => Array<string>;
    /**
     * Read the contents of the file at the given path.
     */
    readFile: (path: string) => Promise<Uint8Array>;
    /**
     * Write and overwrite a file at the given path.
     */
    writeFile: (path: string, bytes: Uint8Array) => Promise<void>;
    /**
     * Turn an URL into a file path.
     */
    urlToFilePath: (url: string) => string;
    /**
     * Return whether a path is absolute.
     */
    isAbsolute: (path: string) => boolean;
    /**
     * Return the path to the current working directory.
     */
    cwd: () => string;
    /**
     * Find the Taplo config file from the given directory
     * and return the path if found.
     *
     * The following files should be searched in order from the given root:
     *
     * - `.taplo.toml`
     * - `taplo.toml`
     */
    findConfigFile: (from: string) => string | undefined;
    /**
     * The fetch function if it is not defined on the global Window.
     *
     * This is required for environments like NodeJs where the fetch API is not available,
     * so a package like `node-fetch` must be used instead.
     *
     */
    fetch?: {
        fetch: any;
        Headers: any;
        Request: any;
        Response: any;
    };
}
/**
 * @private
 */
declare function prepareEnv(environment: Environment): void;
/**
 * @private
 */
declare function convertEnv(env: Environment): any;
/**
 * Taplo formatter options.
 */
interface FormatterOptions {
    /**
     * Align consecutive entries vertically.
     */
    alignEntries?: boolean;
    /** Align consecutive comments after entries and items vertically.
     *
     * This applies to comments that are after entries or array items.
     */
    alignComments?: boolean;
    /**
     * Append trailing commas for multi-line arrays.
     */
    arrayTrailingComma?: boolean;
    /**
     * Expand arrays to multiple lines that exceed the maximum column width.
     */
    arrayAutoExpand?: boolean;
    /**
     * Collapse arrays that don't exceed the maximum column width and don't contain comments.
     */
    arrayAutoCollapse?: boolean;
    /**
     * Omit white space padding from single-line arrays
     */
    compactArrays?: boolean;
    /**
     * Omit white space padding from the start and end of inline tables.
     */
    compactInlineTables?: boolean;
    /**
     * Omit white space around `=`.
     */
    compactEntries?: boolean;
    /**
     * Maximum column width in characters, affects array expansion and collapse, this doesn't take whitespace into account.
     * Note that this is not set in stone, and works on a best-effort basis.
     */
    columnWidth?: number;
    /**
     * Indent based on tables and arrays of tables and their subtables, subtables out of order are not indented.
     */
    indentTables?: boolean;
    /**
     * Indent entries under tables.
     */
    indentEntries?: boolean;
    /**
     * The substring that is used for indentation, should be tabs or spaces (but technically can be anything).
     */
    indentString?: string;
    /**
     * Add trailing newline at the end of the file if not present.
     */
    trailingNewline?: boolean;
    /**
     * Alphabetically reorder keys that are not separated by empty lines.
     */
    reorderKeys?: boolean;
    /**
     * Maximum amount of allowed consecutive blank lines. This does not affect the whitespace at the end of the document, as it is always stripped.
     */
    allowedBlankLines?: number;
    /**
     * Use CRLF for line endings.
     */
    crlf?: boolean;
}
declare namespace Server {
    interface ServerNotifications {
        "taplo/messageWithOutput": {
            params: {
                kind: "info" | "warn" | "error";
                message: string;
            };
        };
        "taplo/didChangeSchemaAssociation": {
            params: {
                documentUri: string;
                schemaUri?: string | null;
                meta?: any;
            };
        };
    }
    export type NotificationMethod = keyof ServerNotifications;
    export type NotificationParams<T extends keyof ServerNotifications> = ServerNotifications[T] extends NotificationDescription ? ServerNotifications[T]["params"] : never;
    export {};
}
declare namespace Client {
    interface ClientNotifications {
        "taplo/associateSchema": {
            params: {
                document_uri?: string | null;
                schema_uri: string;
                rule: AssociationRule;
                priority?: number | null;
                meta?: any;
            };
        };
    }
    interface ClientRequests {
        "taplo/convertToJson": {
            params: {
                text: string;
            };
            response: {
                text?: string | null;
                error?: string | null;
            };
        };
        "taplo/convertToToml": {
            params: {
                text: string;
            };
            response: {
                text?: string | null;
                error?: string | null;
            };
        };
        "taplo/listSchemas": {
            params: {
                documentUri: string;
            };
            response: {
                schemas: Array<SchemaInfo>;
            };
        };
        "taplo/associatedSchema": {
            params: {
                documentUri: string;
            };
            response: {
                schema?: SchemaInfo | null;
            };
        };
    }
    export type NotificationMethod = keyof ClientNotifications;
    export type NotificationParams<T extends keyof ClientNotifications> = ClientNotifications[T] extends NotificationDescription ? ClientNotifications[T]["params"] : never;
    export type RequestMethod = keyof ClientRequests;
    export type RequestParams<T extends keyof ClientRequests> = ClientRequests[T] extends RequestDescription ? ClientRequests[T]["params"] : never;
    export type RequestResponse<T extends keyof ClientRequests> = ClientRequests[T] extends RequestDescription ? ClientRequests[T]["response"] : never;
    export {};
}
declare namespace Lsp {
    interface NotificationDescription {
        readonly params: any;
    }
    interface RequestDescription {
        readonly params: any;
        readonly response: any;
    }
    type AssociationRule = {
        glob: string;
    } | {
        regex: string;
    } | {
        url: string;
    };
    interface SchemaInfo {
        url: string;
        meta: any;
    }
}
interface Config {
    /**
     * Files to exclude (ignore).
     *
     * A list of Unix-like [glob](https://en.wikipedia.org/wiki/Glob_(programming)) path patterns. Globstars (`**`) are supported.
     *
     * Relative paths are **not** relative to the configuration file, but rather depends on the tool using the configuration.
     *
     * This has priority over `include`.
     */
    exclude?: string[];
    /**
     * Formatting options.
     */
    formatting?: FormatterOptions;
    /**
     * Files to include.
     *
     * A list of Unix-like [glob](https://en.wikipedia.org/wiki/Glob_(programming)) path patterns. Globstars (`**`) are supported.
     *
     * Relative paths are **not** relative to the configuration file, but rather depends on the tool using the configuration.
     *
     * Omitting this property includes all files, **however an empty array will include none**.
     */
    include?: string[];
    /**
     * Rules are used to override configurations by path and keys.
     */
    rule?: Rule[];
    /**
     * Schema validation options.
     */
    schema?: SchemaOptions;
}
/**
 * A plugin to extend Taplo's capabilities.
 */
interface Plugin {
    /**
     * Optional settings for the plugin.
     */
    settings?: {
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * A rule to override options by either name or file.
 */
interface Rule {
    /**
     * Files that are excluded from this rule.
     *
     * A list of Unix-like [glob](https://en.wikipedia.org/wiki/Glob_(programming)) path patterns.
     *
     * Relative paths are **not** relative to the configuration file, but rather depends on the tool using the configuration.
     *
     * This has priority over `include`.
     */
    exclude?: string[];
    /**
     * Formatting options.
     */
    formatting?: FormatterOptions;
    /**
     * Files this rule is valid for.
     *
     * A list of Unix-like [glob](https://en.wikipedia.org/wiki/Glob_(programming)) path patterns.
     *
     * Relative paths are **not** relative to the configuration file, but rather depends on the tool using the configuration.
     *
     * Omitting this property includes all files, **however an empty array will include none**.
     */
    include?: string[];
    /**
     * Keys the rule is valid for in a document.
     *
     * A list of Unix-like [glob](https://en.wikipedia.org/wiki/Glob_(programming)) dotted key patterns.
     *
     * This allows enabling the rule for specific paths in the document.
     *
     * For example:
     *
     * - `package.metadata` will enable the rule for everything inside the `package.metadata` table, including itself.
     *
     * If omitted, the rule will always be valid for all keys.
     */
    keys?: string[];
    /**
     * The name of the rule.
     *
     * Used in `taplo::<name>` comments.
     */
    name?: string;
    /**
     * Schema validation options.
     */
    schema?: SchemaOptions;
}
/**
 * Options for schema validation and completion.
 *
 * Schemas in rules with defined keys are ignored.
 */
interface SchemaOptions {
    /**
     * Whether the schema should be enabled or not.
     *
     * Defaults to true if omitted.
     */
    enabled?: boolean;
    /**
     * A local file path to the schema, overrides `url` if set.
     *
     * For URLs, please use `url` instead.
     */
    path?: string;
    /**
     * A full absolute Url to the schema.
     *
     * The url of the schema, supported schemes are `http`, `https`, `file` and `taplo`.
     */
    url?: string;
}
/**
 * Byte range within a TOML document.
 */
interface Range {
    /**
     * Start byte index.
     */
    start: number;
    /**
     * Exclusive end index.
     */
    end: number;
}
export { Environment, prepareEnv, convertEnv, FormatterOptions, Lsp, Config, Plugin, Rule, SchemaOptions, Range };
