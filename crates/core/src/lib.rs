mod pokemon_type;
mod error;

pub fn dummy() {
    println!("Hello, from core.")
}

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use crate::{error::Error, pokemon_type::PokemonType};

    #[test]
    fn test_pokemontype_fromstr() {
        let test_args: Vec<&str> = vec![
            "None", 
            "なし", 
            "Normal", 
            "無", 
            "ノーマル", 
            "Fire", 
            "炎", 
            "ほのお", 
            "Water", 
            "水", 
            "みず", 
            "Electric", 
            "電", 
            "でんき", 
            "Grass", 
            "草", 
            "くさ", 
            "Ice", 
            "氷", 
            "こおり", 
            "Fighting", 
            "格", 
            "かくとう" , 
            "Poison", 
            "毒", 
            "どく", 
            "Ground", 
            "地", 
            "じめん", 
            "Flying", 
            "飛", 
            "ひこう", 
            "Psychic", 
            "超", 
            "エスパー", 
            "Bug", 
            "虫", 
            "むし", 
            "Rock", 
            "岩", 
            "いわ", 
            "Ghost", 
            "霊", 
            "ゴースト", 
            "Dragon", 
            "竜", 
            "ドラゴン", 
            "Dark", 
            "悪", 
            "あく", 
            "Steel", 
            "鋼", 
            "はがね", 
            "Fairy", 
            "妖", 
            "フェアリー", 
            "Dummy", 
            "ダミー"
        ];
        let results: Vec<Result<PokemonType, Error>> = vec![
            Ok(PokemonType::None), 
            Ok(PokemonType::None), 
            Ok(PokemonType::Normal), 
            Ok(PokemonType::Normal), 
            Ok(PokemonType::Normal), 
            Ok(PokemonType::Fire), 
            Ok(PokemonType::Fire), 
            Ok(PokemonType::Fire), 
            Ok(PokemonType::Water), 
            Ok(PokemonType::Water), 
            Ok(PokemonType::Water), 
            Ok(PokemonType::Electric), 
            Ok(PokemonType::Electric), 
            Ok(PokemonType::Electric), 
            Ok(PokemonType::Grass), 
            Ok(PokemonType::Grass), 
            Ok(PokemonType::Grass), 
            Ok(PokemonType::Ice), 
            Ok(PokemonType::Ice), 
            Ok(PokemonType::Ice), 
            Ok(PokemonType::Fighting), 
            Ok(PokemonType::Fighting), 
            Ok(PokemonType::Fighting), 
            Ok(PokemonType::Poison), 
            Ok(PokemonType::Poison), 
            Ok(PokemonType::Poison), 
            Ok(PokemonType::Ground), 
            Ok(PokemonType::Ground), 
            Ok(PokemonType::Ground), 
            Ok(PokemonType::Flying), 
            Ok(PokemonType::Flying), 
            Ok(PokemonType::Flying), 
            Ok(PokemonType::Psychic), 
            Ok(PokemonType::Psychic), 
            Ok(PokemonType::Psychic), 
            Ok(PokemonType::Bug), 
            Ok(PokemonType::Bug), 
            Ok(PokemonType::Bug), 
            Ok(PokemonType::Rock), 
            Ok(PokemonType::Rock), 
            Ok(PokemonType::Rock), 
            Ok(PokemonType::Ghost), 
            Ok(PokemonType::Ghost), 
            Ok(PokemonType::Ghost), 
            Ok(PokemonType::Dragon), 
            Ok(PokemonType::Dragon), 
            Ok(PokemonType::Dragon), 
            Ok(PokemonType::Dark), 
            Ok(PokemonType::Dark), 
            Ok(PokemonType::Dark), 
            Ok(PokemonType::Steel), 
            Ok(PokemonType::Steel), 
            Ok(PokemonType::Steel), 
            Ok(PokemonType::Fairy), 
            Ok(PokemonType::Fairy), 
            Ok(PokemonType::Fairy), 
            Err(Error::StringToTypeConvertError), 
            Err(Error::StringToTypeConvertError)
        ];
        for (arg, result) in test_args.into_iter().zip(results.into_iter()) {
            assert_eq!(PokemonType::from_str(arg), result)
        }
    }
}
